Problem Link: https://codeforces.com/contest/1499/problem/C

Idea:

Here the minimum value of "n" is 2. so we have to go up and right at least one times. 

Now I have selected two smallest costs. Other (n-2) costs will contain only 1 line segments. The selected two smallest costs will contain the remaining line segments. 

This idea is true, because if you have 5*2+6*2 =22 but you made it 5*3+6*1=21 so the cost has decreased. (this part has no relation with the problem)

So, firstly I made a prefix sum array to calculate.

Okay. Then I have to divide the remaining segments to the selected costs. 

We have to check all above parts for 2 to n times to determine the smallest value. if "i" is even we must have to go right and up. (I took my first step as right). 

There I have used two equations. First observe it then I will explain it:

x=n - {(i-2)/2}... ... ...(i)

y=n - {(i-1)/2}... ... ...(ii)

if (i == 2) x = n - 0, y = n - 0

if (i == 3) x = n - 0, y = n - 1

if (i == 4) x = n - 1, y = n - 1

if (i == 5) x = n - 1, y = n - 2

if (i == 6) x = n - 2, y = n - 2

... ... ... ... ... ... ... ...

Look, we have found the number of steps/ line segments to go up in 'x' and right in 'y'. if we go ith steps then we should go i/2 paths up and ceil(i/2) paths right. As we have selected two minimum valued steps earlier so we have removed these two segments. that's why we use (i-2).

Source Code:

#include<bits/stdc++.h>

using namespace std;



int main()

{

    long long t;

    cin>>t;

    while(t--)

    {

        long long n,i,j,k,p,q,r,s,sum=0,cnt=0;

        cin>>n;

        long long a[n+2],dp[n+2]={0};

        for(i=1;i<=n;i++)

        {

            cin>>a[i];

            dp[i]=dp[i-1]+a[i];

        }

        sum=p=LLONG_MAX,q=a[1];

        for(i=2;i<=n;i++)

        {

            if(i%2==0) p = min(p,a[i]);

            else q = min(q,a[i]);

            cnt = dp[i]-p-q;

            r=n-((i-2)/2);

            s=n-((i-1)/2);

            cnt+=(r*p+q*s);

            sum=min(cnt,sum);

        }

        cout<<sum<<endl;

    }

}
